<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EntityToSqlWhereClauseConfig</name>
    </assembly>
    <members>
        <member name="T:EntityToSqlWhereClauseConfig.SearchType">
            <summary>
            
            </summary>
        </member>
        <member name="F:EntityToSqlWhereClauseConfig.SearchType.none">
            <summary>
            未配置
            </summary>
        </member>
        <member name="F:EntityToSqlWhereClauseConfig.SearchType.like">
            <summary>
            like %%
            </summary>
        </member>
        <member name="F:EntityToSqlWhereClauseConfig.SearchType.eq">
            <summary>
            只会翻译成 Equal(=号) 当数据库的值包含,号时且用Equal查询时, 就只能用这个
            </summary>
        </member>
        <member name="F:EntityToSqlWhereClauseConfig.SearchType.in">
            <summary>
            实际翻译成 in 还是 Equal , 根据 split() 后的个数而定
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:EntityToSqlWhereClauseConfig.SearchType.datetimeRange" -->
        <!-- Badly formed XML comment ignored for member "F:EntityToSqlWhereClauseConfig.SearchType.numberRange" -->
        <member name="F:EntityToSqlWhereClauseConfig.SearchType.gt">
            <summary>
             greater than
            </summary>
        </member>
        <member name="F:EntityToSqlWhereClauseConfig.SearchType.ge">
            <summary>
            大于或等于(LE)
            </summary>
        </member>
        <member name="F:EntityToSqlWhereClauseConfig.SearchType.lt">
            <summary>
             less Than
            </summary>
        </member>
        <member name="F:EntityToSqlWhereClauseConfig.SearchType.le">
            <summary>
            小于或等于(LE)
            </summary>
        </member>
        <member name="F:EntityToSqlWhereClauseConfig.SearchType.neq">
            <summary>
            not equal
            </summary>
        </member>
        <member name="F:EntityToSqlWhereClauseConfig.SearchType.likeLeft">
            <summary>
            翻译成 like '%xxx'
            </summary>
        </member>
        <member name="F:EntityToSqlWhereClauseConfig.SearchType.likeRight">
            <summary>
            翻译成 like 'xxx%'
            </summary>
        </member>
        <member name="T:EntityToSqlWhereClauseConfig.WhereLambda`2">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TSearchModel">不要使用多态,会报错的</typeparam>
        </member>
        <member name="M:EntityToSqlWhereClauseConfig.WhereLambda`2.#ctor">
            <summary>
            构造器创建,需要 赋值 SearchModel 属性才能使用
            </summary>
        </member>
        <member name="M:EntityToSqlWhereClauseConfig.WhereLambdaHelper.GetTimeByTimeRange(EntityToSqlWhereClauseConfig.WhereLambdaHelper.TimeRange,System.DateTime)">
            <summary>
            根据 range  获得结束时间
            </summary>
            <param name="range"></param>
            <param name="time"></param>
        </member>
        <member name="M:EntityToSqlWhereClauseConfig.WhereLambdaHelper.AddIn``2(``1,System.Collections.Generic.List{System.String})">
            <summary>
            实际翻译成in 还是 Euqal , 根据 split() 后的个数而定
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TSearchModel"></typeparam>
            <param name="searchModel"></param>
            <param name="props"></param>
            <returns></returns>
        </member>
        <member name="M:EntityToSqlWhereClauseConfig.WhereLambdaHelper.AddIn``2(``1,System.String[])">
            <summary>
            实际翻译成in 还是 Euqal , 根据 split() 后的个数而定
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TSearchModel"></typeparam>
            <param name="searchModel"></param>
            <param name="props"></param>
            <returns></returns>
        </member>
        <member name="T:EntityToSqlWhereClauseConfig.ExtensionMethod.EnumerableExtensions">
            <summary>
            特定的类型
            </summary>
        </member>
        <member name="M:EntityToSqlWhereClauseConfig.ExtensionMethod.StringExtensions.RemoveSuffix(System.String,System.String)">
            <summary>
            移除String对象的最后面几个指定字符
            </summary>
            <param name="value"></param>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="M:EntityToSqlWhereClauseConfig.ExtensionMethod.TypeExtensions.GetNullableTType(System.Type)">
            <summary>
            返回Nullable&lt;T&gt;里的T类型
            </summary>
            <param name="type"></param>
            <returns>返回Nullable&lt;T&gt;里的T类型,T是枚举值</returns>
        </member>
        <member name="M:EntityToSqlWhereClauseConfig.Helper.WhereClauseHelper.ParamNameToNumber(System.String)">
            <summary>
            sql参数名转成数字的
            </summary>
            <param name="whereclause"></param>
            <returns></returns>
        </member>
    </members>
</doc>
