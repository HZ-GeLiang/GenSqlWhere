<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExpressionToWhereClause.Standard</name>
    </assembly>
    <members>
        <member name="M:ExpressionToWhereClause.Standard.TypeExtensions.IsObjectCollection(System.Type,System.Type@,System.Type)">
            <summary>
            是否为列表对象
            </summary>
            <param name="type"></param>
            <param name="objectType">具体的类型</param>
            <param name="objectTypeEqual">objectType应该是</param>
            <returns></returns>
        </member>
        <member name="M:ExpressionToWhereClause.Standard.WhereClauseExpressionExtensions.ToWhereClause``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.Dictionary{System.String,System.String},ExpressionToWhereClause.Standard.ISqlAdapter)">
            <summary>
            转换为Where子句
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">表达式</param>
            <param name="alias">别名</param>
            <param name="sqlAdapter">适配器</param>
            <returns></returns>
        </member>
        <member name="M:ExpressionToWhereClause.Standard.WhereClauseExpressionExtensions.ToWhereClauseAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.Dictionary{System.String,System.String},ExpressionToWhereClause.Standard.ISqlAdapter)">
            <summary>
            转换为Where子句(异步)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <param name="sqlAdapter"></param>
            <returns></returns>
        </member>
        <member name="M:ExpressionToWhereClause.Standard.ConditionBuilder.BuildCondition(System.Reflection.MemberInfo,ExpressionToWhereClause.Standard.WhereClauseAdhesive,System.Linq.Expressions.ExpressionType)">
            <summary>
            编译条件,获得where子句
            </summary>
            <param name="memberInfo"></param>
            <param name="adhesive"></param>
            <param name="comparison"></param>
            <returns>where子句</returns>
        </member>
        <member name="M:ExpressionToWhereClause.Standard.ConstantExtractor.ConstantExpressionValueToString(System.Object,System.Boolean@)">
            <summary>
            这个方法我自己写的
            </summary>
            <param name="value"></param>
            <param name="isParse">是否解析</param>
            <returns></returns>
        </member>
        <member name="M:ExpressionToWhereClause.Standard.ConstantExtractor.ParseConstant(System.Linq.Expressions.Expression)">
            <summary>
            获得Expression的值
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:ExpressionToWhereClause.Standard.ConstantExtractor.ParseMemberConstantExpression(System.Linq.Expressions.MemberExpression)">
            <summary>
            for example: get the age value from u.Age
            </summary>
            <param name="memberExpression"></param>
            <returns></returns>
        </member>
        <member name="M:ExpressionToWhereClause.Standard.ConstantExtractor.ParseMethodCallConstantExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            For example: execute the method to get the value, like: u.Name.SubString(1,2), call the 'SubString' mehod
            </summary>
            <param name="methodCallExpression"></param>
            <returns></returns>
        </member>
        <member name="P:ExpressionToWhereClause.Standard.ParseResult.WhereClause">
            <summary>
            where子句
            </summary>
        </member>
        <member name="P:ExpressionToWhereClause.Standard.ParseResult.NeedAddPara">
            <summary>
            调用方是否需要额外添加参数
            </summary>
        </member>
        <member name="P:ExpressionToWhereClause.Standard.ParseResult.MemberExpression">
            <summary>
            额外添加参数时的辅助信息3: MemberExpression
            </summary>
        </member>
        <member name="P:ExpressionToWhereClause.Standard.ParseResult.MemberInfo">
            <summary>
            额外添加参数时的辅助信息1: Expression的MemberInfo
            </summary>
        </member>
        <member name="T:ExpressionToWhereClause.Standard.WhereClauseAdhesive">
            <summary>
            Where子句胶粘剂
            </summary>
        </member>
        <member name="T:ExpressionToWhereClause.Standard.WhereClauseParser">
            <summary>
            Where子句解析器
            </summary>
        </member>
        <member name="M:ExpressionToWhereClause.Standard.WhereClauseParser.Parse(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,ExpressionToWhereClause.Standard.WhereClauseAdhesive,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="comparison"></param>
            <param name="expression">表达式</param>
            <param name="adhesive">胶粘剂</param>
            <returns> </returns>
        </member>
        <member name="M:ExpressionToWhereClause.Standard.WhereClauseParser.ToLogicSymbol(System.Linq.Expressions.ExpressionType)">
            <summary>
            转换为逻辑符号(And 或 Or)
            </summary>
            <param name="expressionType"></param>
            <returns></returns>
        </member>
    </members>
</doc>
